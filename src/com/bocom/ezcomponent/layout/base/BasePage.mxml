<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		  paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10" xmlns:parsley="http://www.spicefactory.org/parsley"
		  implements="com.bocom.ezcomponent.interfaces.IBizDataInitialize,
		  com.bocom.ezcomponent.interfaces.IBizDataSubmit">
	<fx:Declarations>
		<parsley:ContextBuilder config="{BizConfiguration}">
		</parsley:ContextBuilder>
		<parsley:Configure/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.bocom.ezcomponent.configuration.BizConfiguration;
			import com.bocom.ezcomponent.interfaces.IBizDataCollect;
			import com.bocom.ezcomponent.message.BizInitializeDataReadyMessage;
			import com.bocom.ezcomponent.model.BizInitializeData;
			import com.bocom.ezcomponent.util.LogFormatter;
			import com.bocomm.guip.components.comp.alert.GuipAlert;
			
			import mx.collections.ArrayCollection;
			import mx.logging.ILogger;
			import mx.logging.Log;
			import mx.utils.ObjectUtil;
			
			[MessageDispatcher]
			public var dispatcher:Function;
			
			[Inject]
			public var bizGroups:ArrayCollection;
			
			private var _isBizInitialized:Boolean=false;
			
			[Inject]
			public var bizInitailizeData:BizInitializeData;
			
			private var log:ILogger = Log.getLogger("com.bocom.ezcomponent");
			
			[Init]
			public function onContextInitialized():void{
				if(bizInitailizeData.isAvailable() && !_isBizInitialized){
					log.debug(LogFormatter.appendClassname("Begin biz initialize",this));
					_isBizInitialized=true;
					bizInitialize(this.bizInitailizeData);
				}else{
					log.debug(LogFormatter.appendClassname("Skip biz initialize because of:[bizInitailizeData.isAvailable:" +bizInitailizeData.isAvailable()+
						",_isBizInitialized:" +_isBizInitialized+
						"]",this));
				}
			}
			
			[MessageHandler]
			public function handleBizInitializeDataReady(msg:BizInitializeDataReadyMessage):void{
				var data:Object=msg.data;
				if(data.isAvailable() && !_isBizInitialized){
					log.debug(LogFormatter.appendClassname("Begin biz initialize",this));
					_isBizInitialized=true;
					bizInitialize(this.bizInitailizeData);
				}
				else{
					log.debug(LogFormatter.appendClassname("Skip biz initialize because of:[bizInitailizeData.isAvailable:" +bizInitailizeData.isAvailable()+
						",_isBizInitialized:" +_isBizInitialized+
						"]",this));
				}
			}
			
			
			public function bizInitialize(bizInitailizeData:BizInitializeData):void{
				beforeBizInitialize(bizInitailizeData);
				afterBizInitialize(bizInitailizeData);
			}
			
			/**
			 * 页面初始化前的回调方法
			 * 因为页面内的个逻辑组(标签布局中的每个标签或者瀑布布局中的每个块)自动完成数据铺设，因此对于页面来说，基本没有初始化的内容。但是有需要可以复写该方法
			 */
			public function beforeBizInitialize(bizInitailizeData:BizInitializeData):void{
				
			}
			
			/**
			 * 页面初始化后的回调方法，有需要可以复写
			 * 注意，因为各个逻辑组是(标签布局中的每个标签或者瀑布布局中的每个块)自己完成初始化的，因此页面初始化结束和各逻辑组初始化结束没有关系
			 */
			public function afterBizInitialize(bizInitailizeData:BizInitializeData):void{
				
			}
			
			public function startBizInitialize(data:Object):void{
				log.debug(LogFormatter.appendClassname("Start biz initialize with data:"+data,this));
				bizInitailizeData.data=data;
				dispatcher(new BizInitializeDataReadyMessage(bizInitailizeData));
			}
			
			public function bizDataSubmit():Object{
				var data:Object=new Object();
				for (var j:int = 0; j < bizGroups.length; j++) 
				{
					var collect:IBizDataCollect=bizGroups.getItemAt(j) as IBizDataCollect;
					data[collect.getBizId()]=collect.bizDataCollect();
				}
				
				beforeBizDataSubmit(data);
				log.debug(LogFormatter.appendClassname("Final submit data:"+ObjectUtil.toString(data),this));
				GuipAlert.warn("目前提交与后台联动还没有生成，但是你可以看到我已经收集到了要提交的数据："+ObjectUtil.toString(data));
				var isSuccess:Boolean=false;
				if(isSuccess){
					afterBizDataSubmitSuccess(data);
				}else{
					afterBizDataSubmitFail(data);
				}
				return data;
			}
			
			/**
			 * 页面将各个逻辑组(标签布局中的每个标签或者瀑布布局中的每个块)数据收集好之后，向后台提交前的回调方法
			 * 有需要可以复写，比如来调整发送到后台的数据
			 */
			public function beforeBizDataSubmit(data:Object):void{
				
			}
			
			/**
			 * 后台提交成功后的回调方法，可以复写来完成一些操作，比如锁定页面
			 */
			public function afterBizDataSubmitSuccess(data:Object):void{
				
			}
			
			/**
			 * 后台提交失败后的回调方法，可以复写来完成一些操作，比如锁定页面
			 */
			public function afterBizDataSubmitFail(data:Object):void{
				
			}
		]]>
	</fx:Script>
</s:VGroup>
